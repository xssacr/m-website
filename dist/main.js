!function(t){var e={};function o(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=t,o.c=e,o.d=function(t,e,i){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)o.d(i,n,function(e){return t[e]}.bind(null,n));return i},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=12)}([function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function o(t,e){for(var o=0;o<e.length;o++){var i=e[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}t.exports=function(t,e,i){return e&&o(t.prototype,e),i&&o(t,i),t}},function(t,e,o){t.exports=o(5)},function(t,e){function o(t,e,o,i,n,r,s){try{var a=t[r](s),h=a.value}catch(t){return void o(t)}a.done?e(h):Promise.resolve(h).then(i,n)}t.exports=function(t){return function(){var e=this,i=arguments;return new Promise((function(n,r){var s=t.apply(e,i);function a(t){o(s,n,r,a,h,"next",t)}function h(t){o(s,n,r,a,h,"throw",t)}a(void 0)}))}}},function(t,e,o){"use strict";o.d(e,"a",(function(){return i}));var i=function(t,e){return new Promise((function(o,i){$.ajax({url:t,type:"GET",data:e,success:function(t){o(t)},error:function(t){i(t)}})}))}},function(t,e,o){var i=function(t){"use strict";var e=Object.prototype,o=e.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},n=i.iterator||"@@iterator",r=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function a(t,e,o,i){var n=e&&e.prototype instanceof l?e:l,r=Object.create(n.prototype),s=new T(i||[]);return r._invoke=function(t,e,o){var i="suspendedStart";return function(n,r){if("executing"===i)throw new Error("Generator is already running");if("completed"===i){if("throw"===n)throw r;return S()}for(o.method=n,o.arg=r;;){var s=o.delegate;if(s){var a=k(s,o);if(a){if(a===c)continue;return a}}if("next"===o.method)o.sent=o._sent=o.arg;else if("throw"===o.method){if("suspendedStart"===i)throw i="completed",o.arg;o.dispatchException(o.arg)}else"return"===o.method&&o.abrupt("return",o.arg);i="executing";var l=h(t,e,o);if("normal"===l.type){if(i=o.done?"completed":"suspendedYield",l.arg===c)continue;return{value:l.arg,done:o.done}}"throw"===l.type&&(i="completed",o.method="throw",o.arg=l.arg)}}}(t,o,s),r}function h(t,e,o){try{return{type:"normal",arg:t.call(e,o)}}catch(t){return{type:"throw",arg:t}}}t.wrap=a;var c={};function l(){}function u(){}function p(){}var f={};f[n]=function(){return this};var d=Object.getPrototypeOf,v=d&&d(d(P([])));v&&v!==e&&o.call(v,n)&&(f=v);var m=p.prototype=l.prototype=Object.create(f);function y(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function g(t,e){var i;this._invoke=function(n,r){function s(){return new e((function(i,s){!function i(n,r,s,a){var c=h(t[n],t,r);if("throw"!==c.type){var l=c.arg,u=l.value;return u&&"object"==typeof u&&o.call(u,"__await")?e.resolve(u.__await).then((function(t){i("next",t,s,a)}),(function(t){i("throw",t,s,a)})):e.resolve(u).then((function(t){l.value=t,s(l)}),(function(t){return i("throw",t,s,a)}))}a(c.arg)}(n,r,i,s)}))}return i=i?i.then(s,s):s()}}function k(t,e){var o=t.iterator[e.method];if(void 0===o){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,k(t,e),"throw"===e.method))return c;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var i=h(o,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,c;var n=i.arg;return n?n.done?(e[t.resultName]=n.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,c):n:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,c)}function w(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function b(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(w,this),this.reset(!0)}function P(t){if(t){var e=t[n];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,r=function e(){for(;++i<t.length;)if(o.call(t,i))return e.value=t[i],e.done=!1,e;return e.value=void 0,e.done=!0,e};return r.next=r}}return{next:S}}function S(){return{value:void 0,done:!0}}return u.prototype=m.constructor=p,p.constructor=u,p[s]=u.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===u||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,s in t||(t[s]="GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return{__await:t}},y(g.prototype),g.prototype[r]=function(){return this},t.AsyncIterator=g,t.async=function(e,o,i,n,r){void 0===r&&(r=Promise);var s=new g(a(e,o,i,n),r);return t.isGeneratorFunction(o)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},y(m),m[s]="Generator",m[n]=function(){return this},m.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var o in t)e.push(o);return e.reverse(),function o(){for(;e.length;){var i=e.pop();if(i in t)return o.value=i,o.done=!1,o}return o.done=!0,o}},t.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(b),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function i(o,i){return s.type="throw",s.arg=t,e.next=o,i&&(e.method="next",e.arg=void 0),!!i}for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n],s=r.completion;if("root"===r.tryLoc)return i("end");if(r.tryLoc<=this.prev){var a=o.call(r,"catchLoc"),h=o.call(r,"finallyLoc");if(a&&h){if(this.prev<r.catchLoc)return i(r.catchLoc,!0);if(this.prev<r.finallyLoc)return i(r.finallyLoc)}else if(a){if(this.prev<r.catchLoc)return i(r.catchLoc,!0)}else{if(!h)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return i(r.finallyLoc)}}}},abrupt:function(t,e){for(var i=this.tryEntries.length-1;i>=0;--i){var n=this.tryEntries[i];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var r=n;break}}r&&("break"===t||"continue"===t)&&r.tryLoc<=e&&e<=r.finallyLoc&&(r=null);var s=r?r.completion:{};return s.type=t,s.arg=e,r?(this.method="next",this.next=r.finallyLoc,c):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),c},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.finallyLoc===t)return this.complete(o.completion,o.afterLoc),b(o),c}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc===t){var i=o.completion;if("throw"===i.type){var n=i.arg;b(o)}return n}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,o){return this.delegate={iterator:P(t),resultName:e,nextLoc:o},"next"===this.method&&(this.arg=void 0),c}},t}(t.exports);try{regeneratorRuntime=i}catch(t){Function("r","regeneratorRuntime = r")(i)}},function(t,e){t.exports='<div id="position-wrapper">  <div>    <div class="refersh">下拉刷新</div>    <div class="custom">      <span>10秒中定制职位</span>      <button>去登录</button>    </div>    <div class="position-list">    </div>    <div class="more">      加载更多    </div>  </div></div>'},function(t,e){t.exports='{{each datalist}}<div class="item" data-id="{{$value[\'positionId\']}}">  <img src="http://www.lgstatic.com/{{$value[\'companyLogo\']}}" alt="">  <div class="desc">    <h2>{{$value[\'companyName\']}}</h2>    <p class="pos">      <span class="name">        {{$value[\'positionName\']}}[{{$value[\'city\']}}]      </span>      <span class="salary">        {{$value[\'salary\']}}      </span>    </p>    <p class="time">      {{$value[\'createTime\']}}    </p>  </div></div>{{/each}}'},function(t,e){t.exports="<h2>search</h2>"},function(t,e){t.exports="<h2>profile</h2>"},function(t,e){t.exports='<!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>Document</title></head><body>  <h2>404 Not Found</h2></body></html>'},,function(t,e,o){"use strict";o.r(e);var i=o(0),n=o.n(i),r=o(1),s=o.n(r),a=o(2),h=o.n(a),c=o(3),l=o.n(c),u=o(6),p=o.n(u),f=o(7),d=o.n(f),v=o(4),m=function(t,e){return(m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)};function y(t,e){function o(){this.constructor=t}m(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}var g=function(){return(g=Object.assign||function(t){for(var e,o=1,i=arguments.length;o<i;o++)for(var n in e=arguments[o])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)};function k(t){console.error("[BScroll warn]: "+t)}var w="undefined"!=typeof window,b=w&&navigator.userAgent.toLowerCase(),T=b&&/wechatdevtools/.test(b),P=b&&b.indexOf("android")>0;function S(){return window.performance&&window.performance.now&&window.performance.timing?window.performance.now()+window.performance.timing.navigationStart:+new Date}function E(t){for(var e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];for(var i=0;i<e.length;i++){var n=e[i];for(var r in n)t[r]=n[r]}return t}function x(t){return null==t}var L=w&&document.createElement("div").style,D=function(){if(!w)return!1;var t={webkit:"webkitTransform",Moz:"MozTransform",O:"OTransform",ms:"msTransform",standard:"transform"};for(var e in t)if(void 0!==L[t[e]])return e;return!1}();function B(t){return!1===D?t:"standard"===D?"transitionEnd"===t?"transitionend":t:D+t.charAt(0).toUpperCase()+t.substr(1)}function Y(t){return"string"==typeof t?document.querySelector(t):t}function O(t,e,o,i){t.addEventListener(e,o,{passive:!1,capture:!!i})}function X(t,e,o,i){t.removeEventListener(e,o,{capture:!!i})}function M(t){for(var e=0,o=0;t;)e-=t.offsetLeft,o-=t.offsetTop,t=t.offsetParent;return{left:e,top:o}}D&&"standard"!==D&&D.toLowerCase();var C=B("transform"),A=B("transition"),_=w&&B("perspective")in L,z=w&&("ontouchstart"in window||T),F=w&&A in L,j={transform:C,transition:A,transitionTimingFunction:B("transitionTimingFunction"),transitionDuration:B("transitionDuration"),transitionDelay:B("transitionDelay"),transformOrigin:B("transformOrigin"),transitionEnd:B("transitionEnd")},R={touchstart:1,touchmove:1,touchend:1,mousedown:2,mousemove:2,mouseup:2};function H(t){if(t instanceof window.SVGElement){var e=t.getBoundingClientRect();return{top:e.top,left:e.left,width:e.width,height:e.height}}return{top:t.offsetTop,left:t.offsetLeft,width:t.offsetWidth,height:t.offsetHeight}}function N(t,e){for(var o in e)if(e[o].test(t[o]))return!0;return!1}var K=N;function U(t,e){var o;void 0===e&&(e="click"),"mouseup"===t.type?o=t:"touchend"!==t.type&&"touchcancel"!==t.type||(o=t.changedTouches[0]);var i,n={};o&&(n.screenX=o.screenX||0,n.screenY=o.screenY||0,n.clientX=o.clientX||0,n.clientY=o.clientY||0);if("undefined"!=typeof MouseEvent)try{i=new MouseEvent(e,E({bubbles:!0,cancelable:!0},n))}catch(t){r()}else r();function r(){(i=document.createEvent("Event")).initEvent(e,!0,!0),E(i,n)}i.forwardedTouchEvent=!0,i._constructed=!0,t.target.dispatchEvent(i)}var I={swipe:{style:"cubic-bezier(0.23, 1, 0.32, 1)",fn:function(t){return 1+--t*t*t*t*t}},swipeBounce:{style:"cubic-bezier(0.25, 0.46, 0.45, 0.94)",fn:function(t){return t*(2-t)}},bounce:{style:"cubic-bezier(0.165, 0.84, 0.44, 1)",fn:function(t){return 1- --t*t*t*t}}},q=w&&window;function G(){}var W=w?q.requestAnimationFrame||q.webkitRequestAnimationFrame||q.mozRequestAnimationFrame||q.oRequestAnimationFrame||function(t){return window.setTimeout(t,(t.interval||100/60)/2)}:G,V=w?q.cancelAnimationFrame||q.webkitCancelAnimationFrame||q.mozCancelAnimationFrame||q.oCancelAnimationFrame||function(t){window.clearTimeout(t)}:G,Z=function(t){},J={enumerable:!0,configurable:!0,get:Z,set:Z};var Q=function(){function t(t){this.events={},this.eventTypes={},this.registerType(t)}return t.prototype.on=function(t,e,o){return void 0===o&&(o=this),this.hasType(t),this.events[t]||(this.events[t]=[]),this.events[t].push([e,o]),this},t.prototype.once=function(t,e,o){var i=this;void 0===o&&(o=this),this.hasType(t);var n=function(){for(var r=[],s=0;s<arguments.length;s++)r[s]=arguments[s];i.off(t,n),e.apply(o,r)};return n.fn=e,this.on(t,n),this},t.prototype.off=function(t,e){if(!t&&!e)return this.events={},this;if(t){if(this.hasType(t),!e)return this.events[t]=[],this;var o=this.events[t];if(!o)return this;for(var i=o.length;i--;)(o[i][0]===e||o[i][0]&&o[i][0].fn===e)&&o.splice(i,1);return this}},t.prototype.trigger=function(t){for(var e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o];this.hasType(t);var i=this.events[t];if(i)for(var n,r=i.length,s=i.slice(),a=0;a<r;a++){var h=s[a],c=h[0],l=h[1];if(c&&!0===(n=c.apply(l,e)))return n}},t.prototype.registerType=function(t){var e=this;t.forEach((function(t){e.eventTypes[t]=t}))},t.prototype.destroy=function(){this.events={},this.eventTypes={}},t.prototype.hasType=function(t){var e=this.eventTypes;e[t]===t||k('EventEmitter has used unknown event type: "'+t+'", should be oneof ['+Object.keys(e).map((function(t){return JSON.stringify(t)}))+"]")},t}(),tt=function(){function t(t,e){this.wrapper=t,this.events=e,this.addDOMEvents()}return t.prototype.destroy=function(){this.removeDOMEvents(),this.events=[]},t.prototype.addDOMEvents=function(){this.handleDOMEvents(O)},t.prototype.removeDOMEvents=function(){this.handleDOMEvents(X)},t.prototype.handleDOMEvents=function(t){var e=this,o=this.wrapper;this.events.forEach((function(i){t(o,i.name,e,!!i.capture)}))},t.prototype.handleEvent=function(t){var e=t.type;this.events.some((function(o){return o.name===e&&(o.handler(t),!0)}))},t}(),et=function(){function t(){this.startX=0,this.startY=0,this.scrollX=!1,this.scrollY=!0,this.freeScroll=!1,this.directionLockThreshold=5,this.eventPassthrough="",this.click=!1,this.dblclick=!1,this.tap="",this.bounce={top:!0,bottom:!0,left:!0,right:!0},this.bounceTime=800,this.momentum=!0,this.momentumLimitTime=300,this.momentumLimitDistance=15,this.swipeTime=2500,this.swipeBounceTime=500,this.deceleration=.0015,this.flickLimitTime=200,this.flickLimitDistance=100,this.resizePolling=60,this.probeType=0,this.stopPropagation=!1,this.preventDefault=!0,this.preventDefaultException={tagName:/^(INPUT|TEXTAREA|BUTTON|SELECT|AUDIO)$/},this.tagException={tagName:/^TEXTAREA$/},this.HWCompositing=!0,this.useTransition=!0,this.bindToWrapper=!1,this.disableMouse=z,this.disableTouch=!z,this.autoBlur=!0}return t.prototype.merge=function(t){if(!t)return this;for(var e in t)this[e]=t[e];return this},t.prototype.process=function(){return this.translateZ=this.HWCompositing&&_?" translateZ(0)":"",this.useTransition=this.useTransition&&F,this.preventDefault=!this.eventPassthrough&&this.preventDefault,this.resolveBounce(),this.scrollX="horizontal"!==this.eventPassthrough&&this.scrollX,this.scrollY="vertical"!==this.eventPassthrough&&this.scrollY,this.freeScroll=this.freeScroll&&!this.eventPassthrough,this.scrollX=!!this.freeScroll||this.scrollX,this.scrollY=!!this.freeScroll||this.scrollY,this.directionLockThreshold=this.eventPassthrough?0:this.directionLockThreshold,this},t.prototype.resolveBounce=function(){var t=this.bounce;!1!==t&&!0!==t||(this.bounce=function(t,e){void 0===e&&(e=!0);var o={};return t.forEach((function(t){o[t]=e})),o}(["top","right","bottom","left"],t))},t}();var ot=function(){function t(t,e){this.wrapper=t,this.options=e,this.hooks=new Q(["beforeStart","start","move","end","click"]),this.handleDOMEvents()}return t.prototype.handleDOMEvents=function(){var t=this.options,e=t.bindToWrapper,o=t.disableMouse,i=t.disableTouch,n=t.click,r=this.wrapper,s=e?r:window,a=[],h=[],c=z&&!i,l=!o;n&&a.push({name:"click",handler:this.click.bind(this),capture:!0}),c&&(a.push({name:"touchstart",handler:this.start.bind(this)}),h.push({name:"touchmove",handler:this.move.bind(this)},{name:"touchend",handler:this.end.bind(this)},{name:"touchcancel",handler:this.end.bind(this)})),l&&(a.push({name:"mousedown",handler:this.start.bind(this)}),h.push({name:"mousemove",handler:this.move.bind(this)},{name:"mouseup",handler:this.end.bind(this)})),this.wrapperEventRegister=new tt(r,a),this.targetEventRegister=new tt(s,h)},t.prototype.beforeHandler=function(t,e){var o=this.options,i=o.preventDefault,n=o.stopPropagation,r=o.preventDefaultException;({start:function(){return i&&!N(t.target,r)},end:function(){return i&&!N(t.target,r)},move:function(){return i}})[e]()&&t.preventDefault(),n&&t.stopPropagation()},t.prototype.setInitiated=function(t){void 0===t&&(t=0),this.initiated=t},t.prototype.start=function(t){var e=R[t.type];if(!this.initiated||this.initiated===e)if(this.setInitiated(e),K(t.target,this.options.tagException))this.setInitiated();else if((2!==e||0===t.button)&&!this.hooks.trigger(this.hooks.eventTypes.beforeStart,t)){this.beforeHandler(t,"start");var o=t.touches?t.touches[0]:t;this.pointX=o.pageX,this.pointY=o.pageY,this.hooks.trigger(this.hooks.eventTypes.start,t)}},t.prototype.move=function(t){if(R[t.type]===this.initiated){this.beforeHandler(t,"move");var e=t.touches?t.touches[0]:t,o=e.pageX-this.pointX,i=e.pageY-this.pointY;if(this.pointX=e.pageX,this.pointY=e.pageY,!this.hooks.trigger(this.hooks.eventTypes.move,{deltaX:o,deltaY:i,e:t})){var n=document.documentElement.scrollLeft||window.pageXOffset||document.body.scrollLeft,r=document.documentElement.scrollTop||window.pageYOffset||document.body.scrollTop,s=this.pointX-n,a=this.pointY-r;(s>document.documentElement.clientWidth-this.options.momentumLimitDistance||s<this.options.momentumLimitDistance||a<this.options.momentumLimitDistance||a>document.documentElement.clientHeight-this.options.momentumLimitDistance)&&this.end(t)}}},t.prototype.end=function(t){R[t.type]===this.initiated&&(this.setInitiated(),this.beforeHandler(t,"end"),this.hooks.trigger(this.hooks.eventTypes.end,t))},t.prototype.click=function(t){this.hooks.trigger(this.hooks.eventTypes.click,t)},t.prototype.destroy=function(){this.wrapperEventRegister.destroy(),this.targetEventRegister.destroy(),this.hooks.destroy()},t}(),it={x:["translateX","px"],y:["translateY","px"]},nt=function(){function t(t){this.content=t,this.style=t.style,this.hooks=new Q(["beforeTranslate","translate"])}return t.prototype.getComputedPosition=function(){var t=window.getComputedStyle(this.content,null)[j.transform].split(")")[0].split(", ");return{x:+(t[12]||t[4]),y:+(t[13]||t[5])}},t.prototype.translate=function(t){var e=[];Object.keys(t).forEach((function(o){if(it[o]){var i=it[o][0];if(i){var n=it[o][1],r=t[o];e.push(i+"("+r+n+")")}}})),this.hooks.trigger(this.hooks.eventTypes.beforeTranslate,e,t),this.style[j.transform]=e.join(" "),this.hooks.trigger(this.hooks.eventTypes.translate,t)},t.prototype.destroy=function(){this.hooks.destroy()},t}(),rt=function(){function t(t,e,o){this.content=t,this.translater=e,this.options=o,this.hooks=new Q(["move","end","beforeForceStop","forceStop","time","timeFunction"]),this.style=t.style}return t.prototype.translate=function(t){this.translater.translate(t)},t.prototype.setPending=function(t){this.pending=t},t.prototype.setForceStopped=function(t){this.forceStopped=t},t.prototype.destroy=function(){this.hooks.destroy(),V(this.timer)},t}(),st=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return y(e,t),e.prototype.startProbe=function(){var t=this,e=function(){var o=t.translater.getComputedPosition();t.hooks.trigger(t.hooks.eventTypes.move,o),t.pending?t.timer=W(e):t.hooks.trigger(t.hooks.eventTypes.end,o)};V(this.timer),this.timer=W(e)},e.prototype.transitionTime=function(t){void 0===t&&(t=0),this.style[j.transitionDuration]=t+"ms",this.hooks.trigger(this.hooks.eventTypes.time,t)},e.prototype.transitionTimingFunction=function(t){this.style[j.transitionTimingFunction]=t,this.hooks.trigger(this.hooks.eventTypes.timeFunction,t)},e.prototype.move=function(t,e,o,i,n){this.setPending(o>0&&(t.x!==e.x||t.y!==e.y)),this.transitionTimingFunction(i),this.transitionTime(o),this.translate(e),o&&3===this.options.probeType&&this.startProbe(),o||(this._reflow=this.content.offsetHeight),o||n||(this.hooks.trigger(this.hooks.eventTypes.move,e),this.hooks.trigger(this.hooks.eventTypes.end,e))},e.prototype.stop=function(){if(this.pending){this.setPending(!1),V(this.timer);var t=this.translater.getComputedPosition(),e=t.x,o=t.y;if(this.transitionTime(),this.translate({x:e,y:o}),this.setForceStopped(!0),this.hooks.trigger(this.hooks.eventTypes.beforeForceStop,{x:e,y:o}))return;this.hooks.trigger(this.hooks.eventTypes.forceStop,{x:e,y:o})}},e}(rt),at=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return y(e,t),e.prototype.move=function(t,e,o,i,n){if(!o){if(this.translate(e),this._reflow=this.content.offsetHeight,n)return;return this.hooks.trigger(this.hooks.eventTypes.move,e),void this.hooks.trigger(this.hooks.eventTypes.end,e)}this.animate(t,e,o,i)},e.prototype.animate=function(t,e,o,i){var n=this,r=S(),s=r+o,a=function(){var h=S();if(h>=s)return n.translate(e),n.hooks.trigger(n.hooks.eventTypes.move,e),void n.hooks.trigger(n.hooks.eventTypes.end,e);var c=i(h=(h-r)/o),l={};Object.keys(e).forEach((function(o){var i=t[o],n=e[o];l[o]=(n-i)*c+i})),n.translate(l),n.pending&&(n.timer=W(a)),3===n.options.probeType&&n.hooks.trigger(n.hooks.eventTypes.move,l)};this.setPending(!0),V(this.timer),a()},e.prototype.stop=function(){if(this.pending){this.setPending(!1),V(this.timer);var t=this.translater.getComputedPosition();if(this.setForceStopped(!0),this.hooks.trigger(this.hooks.eventTypes.beforeForceStop,t))return;this.hooks.trigger(this.hooks.eventTypes.forceStop,t)}},e}(rt);var ht,ct,lt,ut,pt=function(){function t(t,e){this.wrapper=t,this.options=e,this.hooks=new Q(["momentum","end"]),this.content=this.wrapper.children[0],this.currentPos=0,this.startPos=0}return t.prototype.start=function(){this.direction=0,this.movingDirection=0,this.dist=0},t.prototype.move=function(t){t=this.hasScroll?t:0,this.movingDirection=t>0?-1:t<0?1:0;var e=this.currentPos+t;return(e>this.minScrollPos||e<this.maxScrollPos)&&(e=e>this.minScrollPos&&this.options.bounces[0]||e<this.maxScrollPos&&this.options.bounces[1]?this.currentPos+t/3:e>this.minScrollPos?this.minScrollPos:this.maxScrollPos),e},t.prototype.end=function(t){var e={duration:0},o=Math.abs(this.currentPos-this.startPos);if(this.options.momentum&&t<this.options.momentumLimitTime&&o>this.options.momentumLimitDistance){var i=-1===this.direction&&this.options.bounces[0]||1===this.direction&&this.options.bounces[1]?this.wrapperSize:0;e=this.hasScroll?this.momentum(this.currentPos,this.startPos,t,this.maxScrollPos,this.minScrollPos,i,this.options):{destination:this.currentPos,duration:0}}else this.hooks.trigger(this.hooks.eventTypes.end,e);return e},t.prototype.momentum=function(t,e,o,i,n,r,s){void 0===s&&(s=this.options);var a=t-e,h=Math.abs(a)/o,c=s.deceleration,l=s.swipeBounceTime,u={destination:t+h/c*(a<0?-1:1),duration:s.swipeTime,rate:15};return this.hooks.trigger(this.hooks.eventTypes.momentum,u,a),u.destination<i?(u.destination=r?Math.max(i-r/4,i-r/u.rate*h):i,u.duration=l):u.destination>n&&(u.destination=r?Math.min(n+r/4,n+r/u.rate*h):n,u.duration=l),u.destination=Math.round(u.destination),u},t.prototype.updateDirection=function(){var t=Math.round(this.currentPos)-this.absStartPos;this.direction=t>0?-1:t<0?1:0},t.prototype.refresh=function(){var t=this.options.rect,e=t.size,o=t.position,i="static"===window.getComputedStyle(this.wrapper,null).position,n=H(this.wrapper);this.wrapperSize=n[e];var r=H(this.content);this.contentSize=r[e],this.relativeOffset=r[o],i&&(this.relativeOffset-=n[o]),this.minScrollPos=0,this.maxScrollPos=this.wrapperSize-this.contentSize,this.maxScrollPos<0&&(this.maxScrollPos-=this.relativeOffset,this.minScrollPos=-this.relativeOffset),this.hasScroll=this.options.scrollable&&this.maxScrollPos<this.minScrollPos,this.hasScroll||(this.maxScrollPos=this.minScrollPos,this.contentSize=this.wrapperSize),this.direction=0},t.prototype.updatePosition=function(t){this.currentPos=t},t.prototype.getCurrentPos=function(){return Math.round(this.currentPos)},t.prototype.checkInBoundary=function(){var t=this.adjustPosition(this.currentPos);return{position:t,inBoundary:t===this.getCurrentPos()}},t.prototype.adjustPosition=function(t){var e=Math.round(t);return!this.hasScroll||e>this.minScrollPos?e=this.minScrollPos:e<this.maxScrollPos&&(e=this.maxScrollPos),e},t.prototype.updateStartPos=function(){this.startPos=this.currentPos},t.prototype.updateAbsStartPos=function(){this.absStartPos=this.currentPos},t.prototype.resetStartPos=function(){this.updateStartPos(),this.updateAbsStartPos()},t.prototype.getAbsDist=function(t){return this.dist+=t,Math.abs(this.dist)},t.prototype.destroy=function(){this.hooks.destroy()},t}(),ft=((ht={}).yes=function(t){return!0},ht.no=function(t){return t.preventDefault(),!1},ht),dt=((ct={}).horizontal=((lt={}).yes="horizontal",lt.no="vertical",lt),ct.vertical=((ut={}).yes="vertical",ut.no="horizontal",ut),ct),vt=function(){function t(t,e,o){this.directionLockThreshold=t,this.freeScroll=e,this.eventPassthrough=o,this.reset()}return t.prototype.reset=function(){this.directionLocked=""},t.prototype.checkMovingDirection=function(t,e,o){return this.computeDirectionLock(t,e),this.handleEventPassthrough(o)},t.prototype.adjustDelta=function(t,e){return"horizontal"===this.directionLocked?e=0:"vertical"===this.directionLocked&&(t=0),{deltaX:t,deltaY:e}},t.prototype.computeDirectionLock=function(t,e){""!==this.directionLocked||this.freeScroll||(t>e+this.directionLockThreshold?this.directionLocked="horizontal":e>=t+this.directionLockThreshold?this.directionLocked="vertical":this.directionLocked="none")},t.prototype.handleEventPassthrough=function(t){var e=dt[this.directionLocked];if(e){if(this.eventPassthrough===e.yes)return ft.yes(t);if(this.eventPassthrough===e.no)return ft.no(t)}return!1},t}(),mt=function(){function t(t,e,o,i,n){this.hooks=new Q(["start","beforeMove","scrollStart","scroll","beforeEnd","end","scrollEnd"]),this.scrollBehaviorX=t,this.scrollBehaviorY=e,this.actionsHandler=o,this.animater=i,this.options=n,this.directionLockAction=new vt(n.directionLockThreshold,n.freeScroll,n.eventPassthrough),this.enabled=!0,this.bindActionsHandler()}return t.prototype.bindActionsHandler=function(){var t=this;this.actionsHandler.hooks.on(this.actionsHandler.hooks.eventTypes.start,(function(e){return!t.enabled||t.handleStart(e)})),this.actionsHandler.hooks.on(this.actionsHandler.hooks.eventTypes.move,(function(e){var o=e.deltaX,i=e.deltaY,n=e.e;return!t.enabled||t.handleMove(o,i,n)})),this.actionsHandler.hooks.on(this.actionsHandler.hooks.eventTypes.end,(function(e){return!t.enabled||t.handleEnd(e)})),this.actionsHandler.hooks.on(this.actionsHandler.hooks.eventTypes.click,(function(e){t.enabled&&!e._constructed&&t.handleClick(e)}))},t.prototype.handleStart=function(t){var e=S();this.moved=!1,this.startTime=e,this.directionLockAction.reset(),this.scrollBehaviorX.start(),this.scrollBehaviorY.start(),this.animater.stop(),this.scrollBehaviorX.resetStartPos(),this.scrollBehaviorY.resetStartPos(),this.hooks.trigger(this.hooks.eventTypes.start,t)},t.prototype.handleMove=function(t,e,o){if(!this.hooks.trigger(this.hooks.eventTypes.beforeMove,o)){var i=this.scrollBehaviorX.getAbsDist(t),n=this.scrollBehaviorY.getAbsDist(e),r=S();if(this.checkMomentum(i,n,r))return!0;if(this.directionLockAction.checkMovingDirection(i,n,o))return this.actionsHandler.setInitiated(),!0;var s=this.directionLockAction.adjustDelta(t,e),a=this.scrollBehaviorX.move(s.deltaX),h=this.scrollBehaviorY.move(s.deltaY);this.moved||(this.moved=!0,this.hooks.trigger(this.hooks.eventTypes.scrollStart)),this.animater.translate({x:a,y:h}),this.dispatchScroll(r)}},t.prototype.dispatchScroll=function(t){t-this.startTime>this.options.momentumLimitTime&&(this.startTime=t,this.scrollBehaviorX.updateStartPos(),this.scrollBehaviorY.updateStartPos(),1===this.options.probeType&&this.hooks.trigger(this.hooks.eventTypes.scroll,this.getCurrentPos())),this.options.probeType>1&&this.hooks.trigger(this.hooks.eventTypes.scroll,this.getCurrentPos())},t.prototype.checkMomentum=function(t,e,o){return o-this.endTime>this.options.momentumLimitTime&&e<this.options.momentumLimitDistance&&t<this.options.momentumLimitDistance},t.prototype.handleEnd=function(t){if(!this.hooks.trigger(this.hooks.eventTypes.beforeEnd,t)){var e=this.getCurrentPos();if(this.scrollBehaviorX.updateDirection(),this.scrollBehaviorY.updateDirection(),this.hooks.trigger(this.hooks.eventTypes.end,t,e))return!0;this.animater.translate(e),this.endTime=S();var o=this.endTime-this.startTime;this.hooks.trigger(this.hooks.eventTypes.scrollEnd,e,o)}},t.prototype.handleClick=function(t){N(t.target,this.options.preventDefaultException)||(t.preventDefault(),t.stopPropagation())},t.prototype.getCurrentPos=function(){return{x:this.scrollBehaviorX.getCurrentPos(),y:this.scrollBehaviorY.getCurrentPos()}},t.prototype.refresh=function(){this.endTime=0},t.prototype.destroy=function(){this.hooks.destroy()},t}();function yt(t,e,o,i){var n=["momentum","momentumLimitTime","momentumLimitDistance","deceleration","swipeBounceTime","swipeTime"].reduce((function(e,o){return e[o]=t[o],e}),{});return n.scrollable=t[e],n.bounces=o,n.rect=i,n}function gt(t,e,o){o.forEach((function(o){var i,n;"string"==typeof o?i=n=o:(i=o.source,n=o.target),t.on(i,(function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];return e.trigger.apply(e,[n].concat(t))}))}))}var kt=function(){function t(t,e){this.hooks=new Q(["beforeStart","beforeMove","beforeScrollStart","scrollStart","scroll","beforeEnd","scrollEnd","refresh","touchEnd","end","flick","scrollCancel","momentum","scrollTo","ignoreDisMoveForSamePos","scrollToElement","resize"]),this.wrapper=t,this.content=t.children[0],this.options=e;var o,i=this.options.bounce,n=i.left,r=void 0===n||n,s=i.right,a=void 0===s||s,h=i.top,c=void 0===h||h,l=i.bottom,u=void 0===l||l;this.scrollBehaviorX=new pt(t,yt(e,"scrollX",[r,a],{size:"width",position:"left"})),this.scrollBehaviorY=new pt(t,yt(e,"scrollY",[c,u],{size:"height",position:"top"})),this.translater=new nt(this.content),this.animater=function(t,e,o){var i=o.useTransition,n={};return Object.defineProperty(n,"probeType",{enumerable:!0,configurable:!1,get:function(){return o.probeType}}),i?new st(t,e,n):new at(t,e,n)}(this.content,this.translater,this.options),this.actionsHandler=new ot(t,(o=this.options,["click","bindToWrapper","disableMouse","disableTouch","preventDefault","stopPropagation","tagException","preventDefaultException"].reduce((function(t,e){return t[e]=o[e],t}),{}))),this.actions=new mt(this.scrollBehaviorX,this.scrollBehaviorY,this.actionsHandler,this.animater,this.options);var p=this.resize.bind(this);this.resizeRegister=new tt(window,[{name:"orientationchange",handler:p},{name:"resize",handler:p}]),this.transitionEndRegister=new tt(this.content,[{name:j.transitionEnd,handler:this.transitionEnd.bind(this)}]),this.init()}return t.prototype.init=function(){var t=this;this.bindTranslater(),this.bindAnimater(),this.bindActions(),this.hooks.on(this.hooks.eventTypes.scrollEnd,(function(){t.togglePointerEvents(!0)}))},t.prototype.bindTranslater=function(){var t=this,e=this.translater.hooks;e.on(e.eventTypes.beforeTranslate,(function(e){t.options.translateZ&&e.push(t.options.translateZ)})),e.on(e.eventTypes.translate,(function(e){t.updatePositions(e),t.togglePointerEvents(!1)}))},t.prototype.bindAnimater=function(){var t=this;this.animater.hooks.on(this.animater.hooks.eventTypes.end,(function(e){t.resetPosition(t.options.bounceTime)||(t.animater.setPending(!1),t.hooks.trigger(t.hooks.eventTypes.scrollEnd,e))})),gt(this.animater.hooks,this.hooks,[{source:this.animater.hooks.eventTypes.move,target:this.hooks.eventTypes.scroll},{source:this.animater.hooks.eventTypes.forceStop,target:this.hooks.eventTypes.scrollEnd}])},t.prototype.bindActions=function(){var t=this,e=this.actions;gt(e.hooks,this.hooks,[{source:e.hooks.eventTypes.start,target:this.hooks.eventTypes.beforeStart},{source:e.hooks.eventTypes.start,target:this.hooks.eventTypes.beforeScrollStart},{source:e.hooks.eventTypes.beforeMove,target:this.hooks.eventTypes.beforeMove},{source:e.hooks.eventTypes.scrollStart,target:this.hooks.eventTypes.scrollStart},{source:e.hooks.eventTypes.scroll,target:this.hooks.eventTypes.scroll},{source:e.hooks.eventTypes.beforeEnd,target:this.hooks.eventTypes.beforeEnd}]),e.hooks.on(e.hooks.eventTypes.end,(function(o,i){return t.hooks.trigger(t.hooks.eventTypes.touchEnd,i),!!t.hooks.trigger(t.hooks.eventTypes.end,i)||(!e.moved&&t.checkClick(o)?(t.animater.setForceStopped(!1),t.hooks.trigger(t.hooks.eventTypes.scrollCancel),!0):(t.animater.setForceStopped(!1),!!t.resetPosition(t.options.bounceTime,I.bounce)||void 0))})),e.hooks.on(e.hooks.eventTypes.scrollEnd,(function(e,o){var i=Math.abs(e.x-t.scrollBehaviorX.startPos),n=Math.abs(e.y-t.scrollBehaviorY.startPos);t.checkFlick(o,i,n)?t.hooks.trigger(t.hooks.eventTypes.flick):t.momentum(e,o)||t.hooks.trigger(t.hooks.eventTypes.scrollEnd,e)}))},t.prototype.checkFlick=function(t,e,o){if(this.hooks.events.flick.length>1&&t<this.options.flickLimitTime&&e<this.options.flickLimitDistance&&o<this.options.flickLimitDistance)return!0},t.prototype.momentum=function(t,e){var o={time:0,easing:I.swiper,newX:t.x,newY:t.y},i=this.scrollBehaviorX.end(e),n=this.scrollBehaviorY.end(e);if(o.newX=x(i.destination)?o.newX:i.destination,o.newY=x(n.destination)?o.newY:n.destination,o.time=Math.max(i.duration,n.duration),this.hooks.trigger(this.hooks.eventTypes.momentum,o,this),o.newX!==t.x||o.newY!==t.y)return(o.newX>this.scrollBehaviorX.minScrollPos||o.newX<this.scrollBehaviorX.maxScrollPos||o.newY>this.scrollBehaviorY.minScrollPos||o.newY<this.scrollBehaviorY.maxScrollPos)&&(o.easing=I.swipeBounce),this.scrollTo(o.newX,o.newY,o.time,o.easing),!0},t.prototype.checkClick=function(t){var e=this.animater.forceStopped;if(this.hooks.trigger(this.hooks.eventTypes.checkClick))return!0;if(!e){var o=this.options.dblclick,i=!1;if(o&&this.lastClickTime){var n=o.delay,r=void 0===n?300:n;S()-this.lastClickTime<r&&(i=!0,function(t){U(t,"dblclick")}(t))}return this.options.tap&&function(t,e){var o=document.createEvent("Event");o.initEvent(e,!0,!0),o.pageX=t.pageX,o.pageY=t.pageY,t.target.dispatchEvent(o)}(t,this.options.tap),this.options.click&&!N(t.target,this.options.preventDefaultException)&&U(t),this.lastClickTime=i?null:S(),!0}return!1},t.prototype.resize=function(){var t=this;this.actions.enabled&&(P&&(this.wrapper.scrollTop=0),this.hooks.trigger(this.hooks.eventTypes.resize)||(clearTimeout(this.resizeTimeout),this.resizeTimeout=window.setTimeout((function(){t.refresh()}),this.options.resizePolling)))},t.prototype.transitionEnd=function(t){t.target===this.content&&this.animater.pending&&(this.animater.transitionTime(),this.resetPosition(this.options.bounceTime,I.bounce)||(this.animater.setPending(!1),3!==this.options.probeType&&this.hooks.trigger(this.hooks.eventTypes.scrollEnd,this.getCurrentPos())))},t.prototype.togglePointerEvents=function(t){void 0===t&&(t=!0);for(var e=this.content.children.length?this.content.children:[this.content],o=t?"auto":"none",i=0;i<e.length;i++){var n=e[i];n.isBScrollContainer||(n.style.pointerEvents=o)}},t.prototype.refresh=function(){this.scrollBehaviorX.refresh(),this.scrollBehaviorY.refresh(),this.actions.refresh(),this.wrapperOffset=M(this.wrapper)},t.prototype.scrollBy=function(t,e,o,i){void 0===o&&(o=0);var n=this.getCurrentPos(),r=n.x,s=n.y;i=i||I.bounce,t+=r,e+=s,this.scrollTo(t,e,o,i)},t.prototype.scrollTo=function(t,e,o,i,n,r){void 0===o&&(o=0),void 0===n&&(n={start:{},end:{}}),i=i||I.bounce;var s=this.options.useTransition?i.style:i.fn,a=this.getCurrentPos(),h=g({x:a.x,y:a.y},n.start),c=g({x:t,y:e},n.end);this.hooks.trigger(this.hooks.eventTypes.scrollTo,c),(this.hooks.trigger(this.hooks.eventTypes.ignoreDisMoveForSamePos)||h.x!==c.x||h.y!==c.y)&&this.animater.move(h,c,o,s,r)},t.prototype.scrollToElement=function(t,e,o,i,n){var r=Y(t),s=M(r),a=function(t,e,o){return"number"==typeof t?t:t?Math.round(e/2-o/2):0};o=a(o,r.offsetWidth,this.wrapper.offsetWidth),i=a(i,r.offsetHeight,this.wrapper.offsetHeight);var h=function(t,e,o,i){return t-=e,t=i.adjustPosition(t-o)};s.left=h(s.left,this.wrapperOffset.left,o,this.scrollBehaviorX),s.top=h(s.top,this.wrapperOffset.top,i,this.scrollBehaviorY),this.hooks.trigger(this.hooks.eventTypes.scrollToElement,r,s)||this.scrollTo(s.left,s.top,e,n)},t.prototype.resetPosition=function(t,e){void 0===t&&(t=0),e=e||I.bounce;var o=this.scrollBehaviorX.checkInBoundary(),i=o.position,n=o.inBoundary,r=this.scrollBehaviorY.checkInBoundary(),s=r.position,a=r.inBoundary;return(!n||!a)&&(this.scrollTo(i,s,t,e),!0)},t.prototype.updatePositions=function(t){this.scrollBehaviorX.updatePosition(t.x),this.scrollBehaviorY.updatePosition(t.y)},t.prototype.getCurrentPos=function(){return this.actions.getCurrentPos()},t.prototype.enable=function(){this.actions.enabled=!0},t.prototype.disable=function(){V(this.animater.timer),this.actions.enabled=!1},t.prototype.destroy=function(){var t=this;["resizeRegister","transitionEndRegister","actionsHandler","actions","hooks","animater","translater","scrollBehaviorX","scrollBehaviorY"].forEach((function(e){return t[e].destroy()}))},t}(),wt=[{sourceKey:"scroller.scrollBehaviorX.currentPos",key:"x"},{sourceKey:"scroller.scrollBehaviorY.currentPos",key:"y"},{sourceKey:"scroller.scrollBehaviorX.hasScroll",key:"hasHorizontalScroll"},{sourceKey:"scroller.scrollBehaviorY.hasScroll",key:"hasVerticalScroll"},{sourceKey:"scroller.scrollBehaviorX.contentSize",key:"scrollerWidth"},{sourceKey:"scroller.scrollBehaviorY.contentSize",key:"scrollerHeight"},{sourceKey:"scroller.scrollBehaviorX.maxScrollPos",key:"maxScrollX"},{sourceKey:"scroller.scrollBehaviorY.maxScrollPos",key:"maxScrollY"},{sourceKey:"scroller.scrollBehaviorX.minScrollPos",key:"minScrollX"},{sourceKey:"scroller.scrollBehaviorY.minScrollPos",key:"minScrollY"},{sourceKey:"scroller.scrollBehaviorX.movingDirection",key:"movingDirectionX"},{sourceKey:"scroller.scrollBehaviorY.movingDirection",key:"movingDirectionY"},{sourceKey:"scroller.scrollBehaviorX.direction",key:"directionX"},{sourceKey:"scroller.scrollBehaviorY.direction",key:"directionY"},{sourceKey:"scroller.actions.enabled",key:"enabled"},{sourceKey:"scroller.animater.pending",key:"pending"},{sourceKey:"scroller.animater.stop",key:"stop"},{sourceKey:"scroller.scrollTo",key:"scrollTo"},{sourceKey:"scroller.scrollBy",key:"scrollBy"},{sourceKey:"scroller.scrollToElement",key:"scrollToElement"},{sourceKey:"scroller.resetPosition",key:"resetPosition"}],bt=function(t){function e(e,o){var i=t.call(this,["refresh","enable","disable","beforeScrollStart","scrollStart","scroll","scrollEnd","scrollCancel","touchEnd","flick","destroy"])||this,n=Y(e);return n?n.children[0]?(i.plugins={},i.options=(new et).merge(o).process(),i.hooks=new Q(["init","refresh","enable","disable","destroy"]),i.init(n),i):(k("The wrapper need at least one child element to be scroller."),i):(k("Can not resolve the wrapper DOM."),i)}return y(e,t),e.use=function(t){var e=t.pluginName;return this.plugins.some((function(e){return t===e.ctor}))?this:x(e)?(k("Plugin Class must specify plugin's name in static property by 'pluginName' field."),this):this.pluginsMap[e]?(k("This plugin has been registered, maybe you need change plugin's name"),this):(this.pluginsMap[e]=!0,this.plugins.push({name:e,applyOrder:t.applyOrder,ctor:t}),this)},e.prototype.init=function(t){this.wrapper=t,t.isBScrollContainer=!0,this.scroller=new kt(t,this.options),this.eventBubbling(),this.handleAutoBlur(),this.innerRefresh(),this.scroller.scrollTo(this.options.startX,this.options.startY),this.enable(),this.proxy(wt),this.applyPlugins()},e.prototype.applyPlugins=function(){var t=this,e=this.options;this.constructor.plugins.sort((function(t,e){var o,i=((o={}).pre=-1,o.post=1,o);return(t.applyOrder?i[t.applyOrder]:0)-(e.applyOrder?i[e.applyOrder]:0)})).forEach((function(o){var i=o.ctor;e[o.name]&&"function"==typeof i&&(t.plugins[o.name]=new i(t))}))},e.prototype.handleAutoBlur=function(){this.options.autoBlur&&this.on(this.eventTypes.beforeScrollStart,(function(){var t=document.activeElement;!t||"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName||t.blur()}))},e.prototype.eventBubbling=function(){gt(this.scroller.hooks,this,["beforeScrollStart","scrollStart","scroll","scrollEnd","scrollCancel","touchEnd","flick"])},e.prototype.innerRefresh=function(){this.scroller.refresh(),this.hooks.trigger(this.hooks.eventTypes.refresh),this.trigger(this.eventTypes.refresh)},e.prototype.proxy=function(t){var e=this;t.forEach((function(t){var o=t.key,i=t.sourceKey;!function(t,e,o){J.get=function(){return function(t,e){for(var o=e.split("."),i=0;i<o.length-1;i++)if("object"!=typeof(t=t[o[i]])||!t)return;var n=o.pop();return"function"==typeof t[n]?function(){return t[n].apply(t,arguments)}:t[n]}(this,e)},J.set=function(t){!function(t,e,o){for(var i,n=e.split("."),r=0;r<n.length-1;r++)t[i=n[r]]||(t[i]={}),t=t[i];t[n.pop()]=o}(this,e,t)},Object.defineProperty(t,o,J)}(e,i,o)}))},e.prototype.refresh=function(){this.innerRefresh(),this.scroller.resetPosition()},e.prototype.enable=function(){this.scroller.enable(),this.hooks.trigger(this.hooks.eventTypes.enable),this.trigger(this.eventTypes.enable)},e.prototype.disable=function(){this.scroller.disable(),this.hooks.trigger(this.hooks.eventTypes.disable),this.trigger(this.eventTypes.disable)},e.prototype.destroy=function(){this.hooks.trigger(this.hooks.eventTypes.destroy),this.trigger(this.eventTypes.destroy),this.scroller.destroy()},e.prototype.eventRegister=function(t){this.registerType(t)},e.plugins=[],e.pluginsMap={},e}(Q),Tt="undefined"!=typeof window,Pt=Tt&&navigator.userAgent.toLowerCase(),St=(Pt&&/wechatdevtools/.test(Pt),Pt&&Pt.indexOf("android"),Tt&&document.createElement("div").style),Et=function(){if(!Tt)return!1;var t={webkit:"webkitTransform",Moz:"MozTransform",O:"OTransform",ms:"msTransform",standard:"transform"};for(var e in t)if(void 0!==St[t[e]])return e;return!1}();function xt(t){return!1===Et?t:"standard"===Et?"transitionEnd"===t?"transitionend":t:Et+t.charAt(0).toUpperCase()+t.substr(1)}Et&&"standard"!==Et&&Et.toLowerCase(),xt("transform"),xt("transition"),Tt&&xt("perspective"),xt("transitionTimingFunction"),xt("transitionDuration"),xt("transitionDelay"),xt("transformOrigin"),xt("transitionEnd");var Lt={style:"cubic-bezier(0.165, 0.84, 0.44, 1)",fn:function(t){return 1- --t*t*t*t}},Dt=Tt&&window;function Bt(){}Tt&&(Dt.requestAnimationFrame||Dt.webkitRequestAnimationFrame||Dt.mozRequestAnimationFrame||Dt.oRequestAnimationFrame),Tt&&(Dt.cancelAnimationFrame||Dt.webkitCancelAnimationFrame||Dt.mozCancelAnimationFrame||Dt.oCancelAnimationFrame);var Yt=[{key:"finishPullDown",name:"finish"},{key:"openPullDown",name:"open"},{key:"closePullDown",name:"close"},{key:"autoPullDownRefresh",name:"autoPull"}].map((function(t){return{key:t.key,sourceKey:"plugins.pullDownRefresh."+t.name}})),Ot=function(){function t(t){this.scroll=t,this.pulling=!1,t.options.pullDownRefresh&&this._watch(),this.scroll.registerType(["pullingDown"]),this.scroll.proxy(Yt)}return t.prototype._watch=function(){this.scroll.options.probeType=3,this.scroll.scroller.hooks.on("end",this._checkPullDown,this)},t.prototype._checkPullDown=function(){if(this.scroll.options.pullDownRefresh){var t=this.scroll.options.pullDownRefresh,e=t.threshold,o=void 0===e?90:e,i=t.stop,n=void 0===i?40:i;return!(-1!==this.scroll.directionY||this.scroll.y<o)&&(this.pulling||(this.pulling=!0,this.scroll.trigger("pullingDown"),this.originalMinScrollY=this.scroll.minScrollY,this.scroll.minScrollY=n),this.scroll.scrollTo(this.scroll.x,n,this.scroll.options.bounceTime,Lt),this.pulling)}},t.prototype.finish=function(){this.pulling=!1,this.scroll.minScrollY=this.originalMinScrollY,this.scroll.resetPosition(this.scroll.options.bounceTime,Lt)},t.prototype.open=function(t){void 0===t&&(t=!0),this.scroll.options.pullDownRefresh=t,this._watch()},t.prototype.close=function(){this.scroll.options.pullDownRefresh=!1},t.prototype.autoPull=function(){var t=this.scroll.options.pullDownRefresh,e=t.threshold,o=void 0===e?90:e,i=t.stop,n=void 0===i?40:i;this.pulling||(this.pulling=!0,this.originalMinScrollY=this.scroll.minScrollY,this.scroll.minScrollY=o,this.scroll.scrollTo(this.scroll.x,o),this.scroll.trigger("pullingDown"),this.scroll.scrollTo(this.scroll.x,n,this.scroll.options.bounceTime,Lt))},t.pluginName="pullDownRefresh",t}(),Xt=[{key:"finishPullUp",name:"finish"},{key:"openPullUp",name:"open"},{key:"closePullUp",name:"close"}].map((function(t){return{key:t.key,sourceKey:"plugins.pullUpLoad."+t.name}})),Mt=function(){function t(t){this.bscroll=t,this.watching=!1,t.options.pullUpLoad&&this._watch(),this.bscroll.registerType(["pullingUp"]),this.bscroll.proxy(Xt)}return t.prototype._watch=function(){this.watching||(this.bscroll.options.probeType=3,this.watching=!0,this.bscroll.on("scroll",this._checkToEnd,this))},t.prototype._checkToEnd=function(t){var e=this;if(this.bscroll.options.pullUpLoad){var o=this.bscroll.options.pullUpLoad.threshold,i=void 0===o?0:o;1===this.bscroll.movingDirectionY&&t.y<=this.bscroll.maxScrollY+i&&(this.bscroll.once("scrollEnd",(function(){e.watching=!1})),this.bscroll.trigger("pullingUp"),this.bscroll.off("scroll",this._checkToEnd))}},t.prototype.finish=function(){this.watching?this.bscroll.once("scrollEnd",this._watch,this):this._watch()},t.prototype.open=function(t){void 0===t&&(t=!0),this.bscroll.options.pullUpLoad=t,this._watch()},t.prototype.close=function(){this.bscroll.options.pullUpLoad=!1,this.watching&&(this.watching=!1,this.bscroll.off("scroll",this._checkToEnd))},t.pluginName="pullUpLoad",t}();bt.use(Ot),bt.use(Mt);var Ct=new(function(){function t(){n()(this,t),this.pageNo=1,this.pageSize=10,this.datalist=[],this.isMore=!0,this.initEvent()}var e,o;return s()(t,[{key:"initEvent",value:function(){$("#main").on("click",".item",(function(){console.log($(this));var t=$(this).attr("data-id");location.href="/detail.html?"+t}))}},{key:"getList",value:(o=l()(h.a.mark((function t(){var e,o,i;return h.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return console.log("加载数据..."),$("#loading").show(),e="/api/positionlist?_page=".concat(this.pageNo,"&_limit=").concat(this.pageSize),t.next=5,Object(v.a)(e);case 5:(o=t.sent).length<this.pageSize&&(this.isMore=!1),this.datalist=this.datalist.concat(o),i=template.render(d.a,{datalist:this.datalist}),$(".position-list").html(i),$("#loading").hide();case 11:case"end":return t.stop()}}),t,this)}))),function(){return o.apply(this,arguments)})},{key:"render",value:(e=l()(h.a.mark((function t(){var e=this;return h.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return console.log($("#swiper-position").html(p.a)),$("#swiper-position").html(p.a),t.next=4,this.getList();case 4:this.scroll=new bt("#position-wrapper",{scrollY:!0,pullDownRefresh:{threshold:50,stop:0},click:!0,pullUpLoad:!0}),this.scroll.on("pullingDown",l()(h.a.mark((function t(){return h.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e.pageNo=1,e.datalist=[],e.isMore=!0,t.next=5,e.getList();case 5:e.scroll.finishPullDown(),e.scroll.refresh();case 7:case"end":return t.stop()}}),t)})))),this.scroll.on("scroll",(function(){this.y>10?$(".refersh").show():$(".refersh").hide()})),this.scroll.on("pullingUp",l()(h.a.mark((function t(){return h.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e.isMore||($(".more").text("没有更多的数据啦.."),setTimeout((function(){$(".more").hide(),e.scroll.refresh()}),2e3)),e.pageNo++,t.next=4,e.getList();case 4:e.scroll.finishPullUp(),e.scroll.refresh();case 6:case"end":return t.stop()}}),t)}))));case 8:case"end":return t.stop()}}),t,this)}))),function(){return e.apply(this,arguments)})}]),t}()),At=o(8),_t=o.n(At),zt=new(function(){function t(){n()(this,t)}return s()(t,[{key:"render",value:function(){$("#swiper-search").html(_t.a)}}]),t}()),Ft=o(9),jt=o.n(Ft),Rt=new(function(){function t(){n()(this,t)}return s()(t,[{key:"render",value:function(){$("#swiper-profile").html(jt.a)}}]),t}()),$t=o(10),Ht=o.n($t),Nt=new(function(){function t(){n()(this,t)}return s()(t,[{key:"render",value:function(){$("#main").html(Ht.a)}}]),t}()),Kt=function(){function t(e){n()(this,t),this.mode=e.mode,this.routrs={position:Ct,search:zt,profile:Rt}}return s()(t,[{key:"go",value:function(t){"hash"===this.mode?location.hash=t:history.pushState({path:t},"","?"+t),this.loadView(t)}},{key:"loadView",value:function(t){this.routrs[t]?this.routrs[t].render():Nt.render()}}]),t}();new(function(){function t(){n()(this,t),this.router=new Kt({mode:"hash"}),this.initEvent(),this.initSwiper()}return s()(t,[{key:"init",value:function(){}},{key:"initEvent",value:function(){var t=this,e=this;$("#nav li").on("click",(function(){$(this).addClass("active").siblings().removeClass("active");var t=$(this).index();e.mySwiper.slideTo(t,300,!1)})),addEventListener("load",(function(){var o=location.hash.replace("#","")||"position";e.router.go(o),t.slideToSwiper(o),t.setActive(o),$("#loading").hide()})),addEventListener("hashchange",(function(){var e=location.hash.replace("#","");t.slideToSwiper(e),t.setActive(e)}))}},{key:"setActive",value:function(t){$("#nav").find("li[data-url=".concat(t,"]")).addClass("active").siblings().removeClass("active")}},{key:"initSwiper",value:function(){var t=this.router;this.mySwiper=new Swiper(".swiper-container",{on:{slideChange:function(){var e=$("#nav").find("li").eq(this.activeIndex).attr("data-url");t.go(e)}}})}},{key:"slideToSwiper",value:function(t){var e=$("#nav").find("li[data-url=".concat(t,"]")).index();this.mySwiper.slideTo(e,300,!1)}}]),t}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,